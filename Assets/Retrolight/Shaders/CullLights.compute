#pragma kernel CullLights

#include "../ShaderLibrary/GBuffer.hlsl"
#include "../ShaderLibrary/Tiling.hlsl"
#include "../ShaderLibrary/Light.hlsl"
#include "../ShaderLibrary/Culling.hlsl"

#define BUCKET_SIZE 32
#define TILE_BUCKET_COUNT (MAX_LIGHTS / BUCKET_SIZE)

uint LightCount;
StructuredBuffer<Light> Lights;
RWByteAddressBuffer AllTiles;

groupshared uint tile[TILE_BUCKET_COUNT];
groupshared uint uMinDepth = 0xFFFFFFFF;
groupshared uint uMaxDepth = 0;
groupshared uint depthMask = 0;

struct ThreadInfo {
    uint2 id : SV_GroupID;
    uint index : SV_GroupIndex;
    uint2 dispatchId : SV_DispatchThreadID;
    uint2 subId : SV_GroupThreadID;
};

void AllowLight(uint index) {
    uint bucketIndex = index / BUCKET_SIZE;
    uint bitIndex = index % BUCKET_SIZE;
    InterlockedOr(tile[bucketIndex], 1 << bitIndex);
}

uint PointLightMask(Sphere screenVolume, float fMinDepth, float depthRangeRecip) {
    const float minDepth = screenVolume.pos.z - screenVolume.r;
    const float maxDepth = screenVolume.pos.z + screenVolume.r;
    const uint minIndex = clamp(0, BUCKET_SIZE - 1, floor((minDepth - fMinDepth) * depthRangeRecip));
    const uint maxIndex = clamp(0, BUCKET_SIZE - 1, floor((maxDepth - fMinDepth) * depthRangeRecip));
    uint mask = 0xFFFFFFFF;
    mask >>= 31 - (maxIndex - minIndex);
    mask <<= minIndex;
    return mask;
}

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void CullLights(ThreadInfo input) {
    //look into parallel reduction rather than atomics
    //const float depth = LoadEyeDepth(input.dispatchId);
    const float depth = 0;
    InterlockedMin(uMinDepth, asuint(depth));
    InterlockedMax(uMaxDepth, asuint(depth));
    GroupMemoryBarrierWithGroupSync();

    #if UNITY_REVERSED_Z
    const float fMinDepth = asfloat(uMaxDepth);
    const float fMaxDepth = asfloat(uMinDepth);
    #else
    const float fMinDepth = asfloat(uMinDepth);
    const float fMaxDepth = asfloat(uMaxDepth);
    #endif
    
    const float depthRangeRecip = float(BUCKET_SIZE) / (fMaxDepth - fMinDepth);
    const uint depthMaskIndex = clamp(floor((depth - fMinDepth) * depthRangeRecip), 0, BUCKET_SIZE - 1);
    InterlockedOr(depthMask, 1 << depthMaskIndex); //look into wave intrinsics and scalarization

    uint i;

    UNITY_UNROLL
    for (i = input.index; i < TILE_BUCKET_COUNT; i += TILE_SIZE * TILE_SIZE) {
        tile[i] = 0; 
    }

    GroupMemoryBarrierWithGroupSync();

    //todo: possible inaccuracy sampling at center of pixel, not corner
    //const float2 minUv = PixelToUV(input.id * TILE_SIZE * TILE_SIZE);
    //const float2 maxUv = PixelToUV((input.id + 1) * TILE_SIZE * TILE_SIZE);
    float2 minUv = 0;
    float2 maxUv = 1;
    const AABB tileVolume = OrthoVolumeFromUVDepth(minUv, maxUv, fMinDepth, fMaxDepth);
    
    UNITY_LOOP
    for (i = input.index; i < MAX_LIGHTS; i += TILE_SIZE * TILE_SIZE) {
        Light light = Lights[i];
        switch(light.Type()) {
            case DIRECTIONAL_LIGHT:
                AllowLight(i);
                break;
            case POINT_LIGHT:
                Sphere volume = PointLightCullVolume(light);
                TransformSphereToView(volume);
                if (!SphereIntersectsAABB(volume, tileVolume)) break; //todo: test culling against camera frustum/aabb
                uint lightDepthMask = PointLightMask(volume, fMinDepth, depthRangeRecip);
                if (lightDepthMask & depthMask) AllowLight(i);
                break;
            case SPOT_LIGHT: break;
            case LINE_LIGHT: break;
            default: break;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    const uint globalTileOffset = (input.id.y * TileCount.x + input.id.x) * TILE_BUCKET_COUNT;
    UNITY_UNROLL
    for (i = input.index; i < TILE_BUCKET_COUNT; i += TILE_SIZE * TILE_SIZE) {
        AllTiles.Store(globalTileOffset + i, tile[i]);
    }
}
