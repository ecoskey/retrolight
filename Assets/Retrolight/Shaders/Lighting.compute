#pragma kernel Lighting

#include "../ShaderLibrary/Common.hlsl"
#include "../ShaderLibrary/GBuffer.hlsl"
#include "../ShaderLibrary/Light.hlsl"
#include "../ShaderLibrary/Lighting.hlsl"
#include "../ShaderLibrary/Viewport.hlsl"
#include "../ShaderLibrary/Edges.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
#define BUCKET_SIZE 32
#define TILE_BUCKET_COUNT (MAX_LIGHTS / BUCKET_SIZE)

uint LightCount;
StructuredBuffer<Light> Lights;
ByteAddressBuffer CullingResults;

RW_TEXTURE2D(float4, FinalColorTex);

struct ThreadInfo {
    uint2 id : SV_GroupID;
    uint index : SV_GroupIndex;
    uint2 dispatchId : SV_DispatchThreadID;
    uint2 subId : SV_GroupThreadID;
};

Surface GetSurfaceGBuffer(PositionInputs inputs) {
    Surface surface;
    const float4 albedo = LoadAlbedo(inputs.positionSS);
    surface.color = albedo.rgb;
    surface.alpha = albedo.a;
    surface.normal = LoadNormal(inputs.positionSS);
    const float4 attributes = LoadAttributes(inputs.positionSS);
    surface.metallic = attributes.x;
    surface.smoothness = attributes.y;
    surface.depthEdgeStrength = attributes.z;
    surface.normalEdgeStrength = attributes.w;
    return surface;
}

float3 GetLighting(Surface surface, PositionInputs positionInputs, Light light) {
    const float2 edges = GetEdgeStrength(positionInputs.positionSS);
    const BRDFParams params = GetBRDFParams(surface, positionInputs, light, edges);
    return DirectBRDF(params);
}

[numthreads(8, 8, 1)]
void Lighting(ThreadInfo input) {
    if (IsPixelOOB(input.dispatchId)) return;
    const uint globalTileOffset = TileIndex(input.id) * TILE_BUCKET_COUNT;
    const PositionInputs positionInputs = GetPositionInput(
        input.dispatchId, Resolution.zw,
        LOAD_TEXTURE2D(DepthTex, input.dispatchId).r,
        UNITY_MATRIX_I_VP, UNITY_MATRIX_V, input.id
    );
    const Surface surface = GetSurfaceGBuffer(positionInputs);
    
    float3 accLight = 0.025 * surface.color;
    UNITY_LOOP
    for (uint i = 0; i * BUCKET_SIZE < LightCount; i++) {
        const uint lightsOffset = i * BUCKET_SIZE;
        uint bucket = CullingResults.Load(globalTileOffset + i);
        while (bucket != 0) {
            const uint firstLightIndex = firstbitlow(bucket);
            ClearBit(bucket, firstLightIndex);
            const Light light = Lights[lightsOffset + firstLightIndex];
            accLight += GetLighting(surface, positionInputs, light);
        }
    }
    
    FinalColorTex[input.dispatchId] = float4(accLight, surface.alpha);
}
