#pragma kernel Lighting

#include "../ShaderLibrary/Common.hlsl"
#include "../ShaderLibrary/GBuffer.hlsl"
#include "../ShaderLibrary/Light.hlsl"
#include "../ShaderLibrary/Lighting.hlsl"
#include "../ShaderLibrary/Viewport.hlsl"
#include "../ShaderLibrary/Edges.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
#define BUCKET_SIZE 32
#define TILE_BUCKET_COUNT (MAX_LIGHTS / BUCKET_SIZE)

uint LightCount;
StructuredBuffer<Light> Lights;
ByteAddressBuffer CullingResults;

RW_TEXTURE2D(float4, FinalColorTex);

struct ThreadInfo {
    uint2 id : SV_GroupID;
    uint index : SV_GroupIndex;
    uint2 dispatchId : SV_DispatchThreadID;
    uint2 subId : SV_GroupThreadID;
};

float3 GetDeferredLighting(Light light, uint2 dispatchId) {
    /*Surface surface;
    surface.color = LoadAlbedo(dispatchId).rgb;
    surface.position = WorldSpaceFromDepthCompute(dispatchId, Resolution.zw);
    surface.normal = LoadNormal(dispatchId);
    const float4 attributes = LoadAttributes(dispatchId);
    surface.metallic = attributes.x;
    surface.smoothness = attributes.y;
    surface.depthEdgeStrength = attributes.z;
    surface.normalEdgeStrength = attributes.w;
    surface.alpha = 1;
    //surface.viewDir = _WorldSpaceCameraPos - surface.position;
    const BRDF brdf = GetBRDF(surface, false);
    return GetLighting(surface, brdf, light);*/
}

[numthreads(8, 8, 1)]
void Lighting(ThreadInfo input) {
    if (IsPixelOOB(input.dispatchId)) return;
    /*const uint globalTileOffset = TileIndex(input.id) * TILE_BUCKET_COUNT;
    float3 accLight = 0;
    UNITY_LOOP
    for (uint i = 0; i * BUCKET_SIZE < LightCount; i++) { 
        const uint lightsOffset = i * BUCKET_SIZE;
        uint bucket = CullingResults.Load(globalTileOffset + i);
        while (bucket != 0) {
            const uint firstLightIndex = firstbitlow(bucket);
            ClearBit(bucket, firstLightIndex);
            const Light light = Lights[lightsOffset + firstLightIndex];
            accLight += GetDeferredLighting(light, input.dispatchId);
        }
    }*/
    FinalColorTex[input.dispatchId] = LoadAlbedo(input.dispatchId);
}
