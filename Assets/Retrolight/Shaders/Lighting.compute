#pragma kernel Lighting

#include "../ShaderLibrary/GBuffer.hlsl"
#include "../ShaderLibrary/Light.hlsl"
#include "../ShaderLibrary/Tiling.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
#define BUCKET_SIZE 32
#define TILE_BUCKET_COUNT (MAX_LIGHTS / BUCKET_SIZE)

uint LightCount;
StructuredBuffer<Light> Lights;
ByteAddressBuffer CullingResults;

RW_TEXTURE2D(float4, FinalColorTex);

struct ThreadInfo {
    uint2 id : SV_GroupID;
    uint index : SV_GroupIndex;
    uint2 dispatchId : SV_DispatchThreadID;
    uint2 subId : SV_GroupThreadID;
};

[numthreads(8, 8, 1)]
void Lighting(ThreadInfo input) {
    const uint globalTileOffset = TileIndex(input.id) * TILE_BUCKET_COUNT;
    for (int i = input.index; i < TILE_BUCKET_COUNT; i++)
    {
        const uint lightsOffset = i * 32;
        uint bucket = CullingResults.Load(globalTileOffset + i);
        #if defined(PLATFORM_SUPPORTS_WAVE_INTRINSICS)
        bucket = WaveReadLaneFirst(WaveActiveBitOr(bucket));
        #endif 
        while (bucket != 0) {
            const uint firstLightIndex = firstbitlow(bucket);
            ClearBit(bucket, firstLightIndex);
            const Light light = Lights[lightsOffset + firstLightIndex];
            //ProcessLight(light, input);
        }
    }

    FinalColorTex[input.dispatchId] = float4((LoadNormal(input.dispatchId) + 1) / 2, 1);
}