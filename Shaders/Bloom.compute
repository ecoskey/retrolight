#pragma kernel DownsampleFirst
#pragma kernel Downsample
#pragma kernel Upsample

#include "../ShaderLibrary/Filtering.hlsl"
#include "../ShaderLibrary/Viewport.hlsl"
#include "../ShaderLibrary/Samplers.hlsl"

TEXTURE2D(Source);
float4 SourceParams; //xy is rthandle scale, zw is 1/scaled resolution
//todo: figure out what about this is making the things dumb

RW_TEXTURE2D(float4, Target);
float4 TargetRes;

float4 ThresholdParams;
float Intensity;

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void DownsampleFirst(const uint2 pos : SV_DispatchThreadID) {
    if (IsPixelOOB(pos, TargetRes.xy)) return;
    const float2 uv = PixelToUV(pos, TargetRes.zw) * SourceParams.xy;
    const float4 color = CustomBox13(TEXTURE2D_ARGS(Source, BILINEAR_SAMPLER), uv, 0, SourceParams.zw);
    Target[pos] = BloomThreshold(color, ThresholdParams);
}

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void Downsample(const uint2 pos : SV_DispatchThreadID) {
    if (IsPixelOOB(pos, TargetRes.xy)) return;
    const float2 uv = PixelToUV(pos, TargetRes.zw) * SourceParams.xy;
    Target[pos] = CustomBox13(TEXTURE2D_ARGS(Source, BILINEAR_SAMPLER), uv, 0, SourceParams.zw);
}

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void Upsample(const uint2 pos : SV_DispatchThreadID) {
    if (IsPixelOOB(pos, TargetRes.xy)) return;
    const float2 uv = PixelToUV(pos, TargetRes.zw) * SourceParams.xy;
    const float4 upsampled = Tent9(TEXTURE2D_ARGS(Source, BILINEAR_SAMPLER), uv, 0, SourceParams.zw);
    Target[pos] += upsampled * Intensity;
}