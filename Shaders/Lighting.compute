#pragma kernel Lighting

#include "../ShaderLibrary/Common.hlsl"
#include "../ShaderLibrary/GBuffer.hlsl"
#include "../ShaderLibrary/Light.hlsl"
#include "../ShaderLibrary/Lighting.hlsl"
#include "../ShaderLibrary/Viewport.hlsl"
#include "../ShaderLibrary/Edges.hlsl"

RW_TEXTURE2D(float4, FinalColorTex);

struct ThreadInfo {
    uint2 id : SV_GroupID;
    uint index : SV_GroupIndex;
    uint2 dispatchId : SV_DispatchThreadID;
    uint2 subId : SV_GroupThreadID;
};

Surface GetSurfaceGBuffer(PositionInputs inputs) {
    Surface surface;
    const float4 diffuseRoughness = LoadDiffuse(inputs.positionSS);
    const float4 specularEdges = LoadSpecular(inputs.positionSS);
    const float3 normal = LoadNormal(inputs.positionSS);
    surface.baseDiffuse = diffuseRoughness.rgb;
    surface.alpha = 1;
    surface.roughness = diffuseRoughness.a;
    surface.baseSpecular = specularEdges.rgb;
    surface.edgeStrength = specularEdges.a;
    surface.normal = SafeNormalize(normal);
    return surface;
}

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void Lighting(ThreadInfo input) {
    if (IsPixelOOB(input.dispatchId)) return;
    const uint globalTileOffset = TileIndex(input.id) * LIGHT_TILE_BUCKET_COUNT;
    const PositionInputs positionInputs = GetPositionInput(
        input.dispatchId, Resolution.zw,
        LOAD_TEXTURE2D(DepthTex, input.dispatchId).r,
        UNITY_MATRIX_I_VP, UNITY_MATRIX_V, input.id
    );
    
    const Surface surface = GetSurfaceGBuffer(positionInputs);
    
    float3 accLight = 0.025 * surface.baseDiffuse;
    UNITY_LOOP
    for (uint i = 0; i * BUCKET_SIZE < MAX_LIGHTS; i++) {
        FinalColorTex[input.dispatchId] = 1;
        const uint lightsOffset = i * BUCKET_SIZE;
        uint bucket = LightCullingResults.Load(globalTileOffset + i);
        while (bucket != 0) {
            const uint firstLightIndex = firstbitlow(bucket);
            ClearBit(bucket, firstLightIndex);
            const Light light = Lights[lightsOffset + firstLightIndex];
            const LightingData lighting = GetLighting(light, surface.normal, positionInputs);
            accLight += DirectBRDF(surface, lighting, GetViewDir(positionInputs.positionWS));
        }
    }
    FinalColorTex[input.dispatchId] = float4(accLight, surface.alpha);
}
