#pragma kernel Lighting

#pragma multi_compile _ SHADOWS_ENABLED
#pragma multi_compile _ SSAO_ENABLED

#include "Packages/net.cosc.retrolight/ShaderLibrary/Common.hlsl"
#include "Packages/net.cosc.retrolight/ShaderLibrary/GBuffer.hlsl"
#include "Packages/net.cosc.retrolight/ShaderLibrary/Light.hlsl"
#include "Packages/net.cosc.retrolight/ShaderLibrary/Lighting.hlsl"
#include "Packages/net.cosc.retrolight/ShaderLibrary/Viewport.hlsl"
#include"Packages/net.cosc.retrolight/ShaderLibrary/Culling.hlsl"
#include "Packages/net.cosc.retrolight/ShaderLibrary/Edges.hlsl"
//#include "Packages/net.cosc.retrolight/ShaderLibrary/HilbertInput.hlsl"

#define THREADING_BLOCK_SIZE (TILE_SIZE * TILE_SIZE)
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Threading.hlsl"


//TEXTURE2D(GTAOTex);

RW_TEXTURE2D(float3, FinalColorTex);

Surface GetSurfaceGBuffer(uint2 positionSS) {
    Surface surface;
    const float4 diffuseRoughness = LoadDiffuse(positionSS);
    const float4 specularEdges = LoadSpecular(positionSS);
    const float3 normal = LoadNormal(positionSS);
    surface.baseDiffuse = diffuseRoughness.rgb;
    surface.alpha = 1;
    surface.roughness = diffuseRoughness.a;
    surface.baseSpecular = specularEdges.rgb;
    surface.edgeStrength = specularEdges.a;
    surface.normalVS = normal;
    return surface;
}

[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void Lighting(Threading::Group group) {
    if (IsPixelOOB(group.dispatchID.xy)) return;
    const float depth = LOAD_TEXTURE2D(DepthTex, group.dispatchID.xy).r;
    if (depth == UNITY_RAW_FAR_CLIP_VALUE) {
        FinalColorTex[group.dispatchID.xy] = LOAD_TEXTURE2D(FinalColorTex, group.dispatchID.xy).rgb;
        return;
    }

    //const uint hilbertIndex = Filtering::ComputeHilbertIndex(64, group.dispatchID.x, group.dispatchID.y);
    
    //check if groupID
    const uint globalTileOffset = TileIndex(group.groupID.xy) * LIGHT_TILE_BUCKET_COUNT;
    float3 positionVS = ViewSpaceFromDepthCompute(group.dispatchID.xy, Resolution.zw);
    //positionVS.z = - positionVS.z;
    float3 viewDirVS = GetViewDirVS(positionVS);

    Surface surface = GetSurfaceGBuffer(group.dispatchID.xy);
    
    float3 accLight = 0.025 * surface.baseDiffuse;
    UNITY_LOOP
    for (uint i = 0; i * BUCKET_SIZE < LightCount; i++) {
        const uint lightsOffset = i * BUCKET_SIZE;
        uint bucket = LightCullingResults.Load(globalTileOffset + i);
        while (bucket != 0) {
            const uint firstLightIndex = firstbitlow(bucket);
            ClearBit(bucket, firstLightIndex);
            Light light = Lights[lightsOffset + firstLightIndex];
            const float snormNoise = Filtering::Remap01To11(Filtering::Bayer4(group.dispatchID.xy));
            const LightingData lighting = GetLighting(light, surface.normalVS, positionVS, snormNoise, surface.roughness * 0.005);
            accLight += DirectBRDF(surface, lighting, viewDirVS);
        }
    }
    /*const float2 edges = GetEdgeStrength(group.dispatchID.xy);
    const float edgeStrength = max(edges.x, edges.y) * surface.edgeStrength;
    const float modifier = edges.y > edges.x ? 1 + edgeStrength : 1 - edgeStrength;*/
    
    
    FinalColorTex[group.dispatchID.xy] = accLight;
}
